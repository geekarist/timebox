#!/usr/bin/python

# minimal sample showing how to write GTK3 indicator for Ubuntu Unity
# copyright 2012 Charl P. Botha <info@charlbotha.com>
# hereby released under the BSD license.
# https://bitbucket.org/cpbotha/indicator-cpuspeed/src

# use the PyGObject GObject introspection to use GTK+ 3
# also see
# http://readthedocs.org/docs/python-gtk-3-tutorial/en/latest/index.html
# http://developer.gnome.org/gtk3/stable/ (API reference)

from gi.repository import Gtk, GLib

try:
    from gi.repository import AppIndicator3 as AppIndicator
except:
    from gi.repository import AppIndicator

import re
import sys


class IndicatorTimebox:

    def __init__(self):
        self.parse_args()

        # param1: identifier of this indicator
        # param2: name of icon. this will be searched for in the standard them
        # dirs
        # finally, the category. We're monitoring CPUs, so HARDWARE.
        self.ind = AppIndicator.Indicator.new(
            "indicator-timebox",
            "",
            AppIndicator.IndicatorCategory.HARDWARE)

        # some more information about the AppIndicator:
        # http://developer.ubuntu.com/api/ubuntu-12.04/python/AppIndicator3-0.1.html
        # http://developer.ubuntu.com/resources/technologies/application-indicators/

        # need to set this for indicator to be shown
        self.ind.set_status(AppIndicator.IndicatorStatus.ACTIVE)

        # have to give indicator a menu
        self.menu = Gtk.Menu()

        # you can use this menu item for experimenting
        # item = Gtk.MenuItem()
        # item.set_label("Test")
        # item.connect("activate", self.handler_menu_test)
        # item.show()
        # self.menu.append(item)

        # this is for exiting the app
        item = Gtk.MenuItem()
        item.set_label("Exit")
        item.connect("activate", self.handler_menu_exit)
        item.show()
        self.menu.append(item)

        self.menu.show()
        self.ind.set_menu(self.menu)

        # initialize cpu speed display
        self.update_countdown()

        # then start updating every 1 seconds
        # http://developer.gnome.org/pygobject/stable/glib-functions.html#function-glib--timeout-add-seconds
        GLib.timeout_add_seconds(1, self.call_update_countdown)

    def parse_args(self):
        if len(sys.argv) >= 2:
            self.duration_seconds = 60 * float(str(sys.argv[1]))
        else:
            print 'Usage: timebox <minutes>'
            sys.exit(1)

    def handler_menu_exit(self, evt):
        Gtk.main_quit()

    def handler_menu_test(self, evt):
        # we can change the icon at any time
        self.ind.set_icon("indicator-messages-new")

    def call_update_countdown(self):
        """This will be called every few seconds by the GLib.timeout.
        """
        # read, parse and put cpu speeds in the label
        self.update_countdown()
        # return True so that we get called again
        # returning False will make the timeout stop

        if self.duration_seconds > 0:
            return True
        self.display_timesup_alert()
        return False

    def snooze(self, evt):
        self.duration_seconds = 60
        self.update_countdown()
        GLib.timeout_add_seconds(1, self.call_update_countdown)
        # TODO self.close_timesup_alert()

    def display_timesup_alert(self):
        dialog = Gtk.MessageDialog(
            message_format = "Time's up!", buttons = Gtk.ButtonsType.OK,
            flags = Gtk.DialogFlags.MODAL)
        snooze_button = Gtk.Button(label="Snooze")
        snooze_button.connect("clicked", self.snooze)
        dialog.action_area.pack_start(snooze_button, True, True, 0)
        snooze_button.show()
        dialog.run()
        dialog.destroy()

    def update_countdown(self):
        self.duration_seconds = self.duration_seconds - 1
        minutes = self.duration_seconds / 60
        seconds = self.duration_seconds % 60
        self.ind.set_label('00:%02d:%02d' % (minutes, seconds), "..XX:XX:XX..")

    def main(self):
        Gtk.main()

if __name__ == "__main__":
    ind = IndicatorTimebox()
    ind.main()
